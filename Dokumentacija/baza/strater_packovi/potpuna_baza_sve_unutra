/* -------------------------------------------------------------------- */
CREATE TABLE korisnik
(
  email VARCHAR(50) NOT NULL,
  idKorisnik INT NOT NULL,
  username VARCHAR(100) NOT NULL,
  uloga INT NOT NULL DEFAULT 0,
  koristi INT NOT NULL DEFAULT 1,
  PRIMARY KEY (email),
  UNIQUE (idKorisnik)
);

CREATE TABLE oglas
(
  datum TIMESTAMP NOT NULL,
  ulica VARCHAR(50) NOT NULL,
  grad VARCHAR(50) NOT NULL,
  kucnibr VARCHAR(50) NOT NULL,
  opis VARCHAR(1000) NOT NULL,
  idOglas INT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  aktivan INT NOT NULL,
  tipOglas INT NOT NULL,
  opisZamjene VARCHAR(1000),
  email VARCHAR(50) NOT NULL,
  PRIMARY KEY (idOglas),
  FOREIGN KEY (email) REFERENCES KORISNIK(email)
);

CREATE TABLE tipdog
(
  nazivtipa VARCHAR(100) NOT NULL,
  idDog INT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  PRIMARY KEY (idDog)
);

CREATE TABLE ulaznica
(
  red INT,
  broj INT,
  vrstaUlaznice INT,
  idUlaznica INT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  cijena FLOAT,
  idOglas INT NOT NULL,
  PRIMARY KEY (idUlaznica),
  FOREIGN KEY (idOglas) REFERENCES oglas(idOglas)
);

CREATE TABLE volioglas
(
  voli INT NOT NULL,
  email VARCHAR(50) NOT NULL,
  idOglas INT NOT NULL,
  PRIMARY KEY (email, idOglas),
  FOREIGN KEY (email) REFERENCES KORISNIK(email),
  FOREIGN KEY (idOglas) REFERENCES oglas(idOglas)
);

CREATE TABLE jetip
(
  idDog INT NOT NULL,
  idOglas INT NOT NULL,
  PRIMARY KEY (idDog, idOglas),
  FOREIGN KEY (idDog) REFERENCES tipdog(idDog),
  FOREIGN KEY (idOglas) REFERENCES oglas(idOglas)
);

CREATE TABLE nadtransakcija
(
  dvNadPocetak TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,  
  idNadtransakcija INT NOT NULL GENERATED BY DEFAULT AS IDENTITY, 
  ukupno integer NOT NULL DEFAULT 0,
  PRIMARY KEY (idNadtransakcija )
 
);

CREATE TABLE transakcija
(
  idTransakcija INT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  uspjesna INT NOT NULL DEFAULT 0,
  dvPocetak TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  idUlaznica INT NOT NULL,
  idNadtransakcija INT,
  PRIMARY KEY (idTransakcija),
  FOREIGN KEY (idUlaznica) REFERENCES ulaznica(idUlaznica),
  FOREIGN KEY (idNadtransakcija) REFERENCES nadtransakcija(idNadtransakcija)
);

CREATE TABLE jeukljucen
(
  odluka INT NOT NULL DEFAULT 0,
  email VARCHAR(50) NOT NULL,
  idTransakcija INT NOT NULL,
  PRIMARY KEY (email, idTransakcija),
  FOREIGN KEY (email) REFERENCES KORISNIK(email),
  FOREIGN KEY (idTransakcija) REFERENCES transakcija(idTransakcija)
);

CREATE TABLE semijenja
(
  idUlaznica INT NOT NULL,
  idTransakcija INT NOT NULL,
  PRIMARY KEY (idUlaznica, idTransakcija),
  FOREIGN KEY (idUlaznica) REFERENCES ulaznica(idUlaznica),
  FOREIGN KEY (idTransakcija) REFERENCES transakcija(idTransakcija)
);

CREATE TABLE spor
(
  idSpor INT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  opisSpor VARCHAR(1000) NOT NULL,
  dvSpor TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  odlukaSpor INT NOT NULL DEFAULT 0,
  obrazlozenje VARCHAR(1000),
  tuzioEmail VARCHAR(50) NOT NULL,
  tuzenEmail VARCHAR(50) NOT NULL,
  PRIMARY KEY (idSpor),
  FOREIGN KEY (tuzioEmail) REFERENCES korisnik(email),
  FOREIGN KEY (tuzenEmail) REFERENCES korisnik(email)
);
/* -------------------------------------------------------------------- */
/* pripazite na port koji su vam baze i promjenite ga u aplication.properties*/

CREATE USER "pone" WITH PASSWORD 'Qw234!*2?';
GRANT ALL PRIVILEGES ON DATABASE "progi" TO pone;
GRANT ALL PRIVILEGES ON TABLE jetip TO pone;
GRANT ALL PRIVILEGES ON TABLE jeukljucen TO pone;
GRANT ALL PRIVILEGES ON TABLE korisnik TO pone;
GRANT ALL PRIVILEGES ON TABLE oglas TO pone;
GRANT ALL PRIVILEGES ON TABLE semijenja TO pone;
GRANT ALL PRIVILEGES ON TABLE tipdog TO pone;
GRANT ALL PRIVILEGES ON TABLE transakcija TO pone;
GRANT ALL PRIVILEGES ON TABLE ulaznica TO pone;
GRANT ALL PRIVILEGES ON TABLE volioglas TO pone;
GRANT ALL PRIVILEGES ON TABLE nadtransakcija TO pone;
GRANT ALL PRIVILEGES ON TABLE spor TO pone;

/* -------------------------------------------------------------------- */
/* triggeri */

1) TRIGGER ZA brojanje karata */

CREATE OR REPLACE FUNCTION fjaPrebrojiKarte() RETURNS trigger AS

$$
	DECLARE 
		brojac INT = 0.0;
		aktivanoglas INT = 0.0;

	BEGIN 
		brojac = (SELECT COUNT(*) FROM ulaznica WHERE idOglas= NEW.idOglas AND vrstaUlaznice>0) ;
		aktivanoglas = (SELECT aktivan FROM oglas WHERE idOglas= NEW.idOglas);
	
		IF(brojac > 0 AND aktivanoglas <> -2 AND aktivanoglas <> -1 AND aktivanoglas <> -10) THEN
			UPDATE oglas 
            SET aktivan = brojac
            WHERE idOglas = NEW.idOglas;
			
		-- Ako je brojac 0, sve prodane =>neaktivan kao sustav
        ELSIF brojac = 0 THEN
            UPDATE oglas 
             SET aktivan = 0
            WHERE idOglas = NEW.idOglas;
		END IF;
		
		RETURN NEW;
	END;	
	
$$ LANGUAGE plpgsql;


CREATE TRIGGER PrebrojiKarte 
	AFTER INSERT OR UPDATE ON ulaznica
		FOR EACH ROW EXECUTE PROCEDURE fjaPrebrojiKarte();

/*----------------------------------------------------------------------
 2) TRIGGER za dodavanje odluke prodavača */

CREATE OR REPLACE FUNCTION fjaZgotoviKupnju() RETURNS trigger AS

$$
	DECLARE 
		brojac INT = 0.0;
		tip INT = 0.0;
		mail VARCHAR;

	BEGIN 
		brojac = (SELECT tipOglas FROM ulaznica NATURAL JOIN transakcija NATURAL JOIN oglas WHERE NEW.idTransakcija = idTransakcija) ;
	
		IF(brojac = 1) THEN
			mail = (SELECT email FROM ulaznica NATURAL JOIN transakcija NATURAL JOIN oglas WHERE NEW.idTransakcija = idTransakcija) ;
			INSERT INTO jeUkljucen (email, idTransakcija, odluka) VALUES ( mail ,NEW.idTransakcija, 1);
			
			/* za dovrsetak tranakcije */
			UPDATE transakcija SET uspjesna = 1 WHERE NEW.idTransakcija = idTransakcija;
			
			/* za prikaz neaktivnosti */
			tip = (SELECT vrstaUlaznice FROM ulaznica NATURAL JOIN transakcija WHERE NEW.idTransakcija = idTransakcija) ;
			tip = -tip;
			UPDATE ulaznica SET vrstaUlaznice = tip  WHERE NEW.idUlaznica = idUlaznica;

		END IF;
		
		RETURN NEW;
	END;	
	
$$ LANGUAGE plpgsql;

CREATE TRIGGER ZgotoviKupnju 
	AFTER INSERT ON transakcija
		FOR EACH ROW EXECUTE PROCEDURE fjaZgotoviKupnju();

/*----------------------------------------------------------------------
 4) TRIGGER za slanje zahtjeva potvrde zamjene vlasniku karte */
CREATE OR REPLACE FUNCTION fjaZapocniZamjenu() RETURNS trigger AS

$$
	DECLARE 
		brojac INT = 0.0;
		tip INT = 0.0;
		mail VARCHAR;

	BEGIN 
		brojac = (SELECT tipOglas FROM ulaznica NATURAL JOIN transakcija NATURAL JOIN oglas WHERE NEW.idTransakcija = idTransakcija) ;
	
		IF(brojac = 0) THEN
			mail = (SELECT email FROM ulaznica NATURAL JOIN transakcija NATURAL JOIN oglas WHERE NEW.idTransakcija = idTransakcija) ;
			INSERT INTO jeUkljucen (email, idTransakcija, odluka) VALUES (mail, NEW.idTransakcija, 0);

		END IF;
		
		RETURN NEW;
	END;	
	
$$ LANGUAGE plpgsql;

CREATE TRIGGER ZapocniZamjenu 
	AFTER INSERT ON transakcija
		FOR EACH ROW EXECUTE PROCEDURE fjaZapocniZamjenu();


/*----------------------------------------------------------------------
 5) TRIGGER za dovršavanje zamjene nakon odluke (upis odluke) */

CREATE OR REPLACE FUNCTION fjaOdluciZamjenu() RETURNS trigger AS

$$
	DECLARE 
		brojac INT = 0.0;
		suma INT = 0.0;
		tip INT = 0.0;

	BEGIN 
		brojac = (SELECT tipOglas FROM 
				  	ulaznica NATURAL JOIN transakcija NATURAL JOIN oglas NATURAL JOIN jeUkljucen 
				  		WHERE NEW.idTransakcija = idTransakcija );
		suma = (SELECT SUM (odluka) FROM jeUkljucen WHERE idTransakcija = NEW.idTransakcija);
	
		IF(brojac = 0 AND (suma = 1 OR suma = 3)) THEN
			UPDATE transakcija SET uspjesna = (suma-2) WHERE NEW.idTransakcija = idTransakcija;
		END IF;
		
		
		RETURN NEW;
	END;	
	
$$ LANGUAGE plpgsql;

CREATE TRIGGER OdluciZamjenu 
	AFTER INSERT OR UPDATE ON jeUkljucen
		FOR EACH ROW EXECUTE PROCEDURE fjaOdluciZamjenu();


/*----------------------------------------------------------------------
 6) TRIGGER za dovršavanje zamjene nakon odluke (deaktivacije karta (i ponuditelja i primatelja)) */

CREATE OR REPLACE FUNCTION fjaZgotoviZamjenu() RETURNS trigger AS

$$
	DECLARE 
		brojac INT = 0.0;
		tip INT = 0.0;
		drugaKarta INT = 0.0;

	BEGIN 
		brojac = (SELECT tipOglas FROM ulaznica NATURAL JOIN transakcija NATURAL JOIN oglas WHERE NEW.idTransakcija = idTransakcija) ;
	
		IF(brojac = 0 AND NEW.uspjesna = 1) THEN
			
			/* za prikaz neaktivnosti karte onog koji je prihvatio "prodavac" */
			tip = (SELECT vrstaUlaznice FROM ulaznica NATURAL JOIN transakcija WHERE NEW.idTransakcija = idTransakcija) ;
			tip = -tip;
			UPDATE ulaznica SET vrstaUlaznice = tip  WHERE NEW.idUlaznica = idUlaznica;
			
			/* za prikaz neaktivnosti karte onog koji je ponudio "kupac" */
			tip = (SELECT vrstaUlaznice FROM semijenja  NATURAL JOIN ulaznica NATURAL JOIN oglas 
				   	WHERE NEW.idTransakcija = idTransakcija);
			drugaKarta = (SELECT idulaznica FROM semijenja NATURAL JOIN ulaznica NATURAL JOIN oglas
					WHERE NEW.idTransakcija = idTransakcija);
			tip = -tip;
			UPDATE ulaznica SET vrstaUlaznice = tip  WHERE  drugaKarta = idUlaznica;

		END IF;
		
		RETURN NEW;
	END;	
	
$$ LANGUAGE plpgsql;

CREATE TRIGGER ZgotoviZamjenu 
	AFTER INSERT OR UPDATE ON transakcija
		FOR EACH ROW EXECUTE PROCEDURE fjaZgotoviZamjenu();

/*----------------------------------------------------------------------
 8) TRIGGER za mijenjanje ukupno u nadtransakciji svi 1 => ukupno 1, narem 1  -1 => 1 */
		
CREATE OR REPLACE FUNCTION fjaUkupnaOdlukaLanca() RETURNS trigger AS

$$
	DECLARE 
		brojac INT = 0.0;
		postavljeno INT = 0.0;
		suma INT = 0.0;
		minus INT = 0.0;
		zastavica INT = 0.0 ;

	BEGIN 
		brojac = (SELECT tipOglas FROM ulaznica NATURAL JOIN transakcija NATURAL JOIN oglas WHERE NEW.idTransakcija = idTransakcija) ;
		zastavica = (SELECT ukupno FROM transakcija NATURAL JOIN nadtransakcija WHERE NEW.idTransakcija = idTransakcija);
	
		IF(brojac = 2 AND zastavica = 0) THEN
				 
			suma = (SELECT SUM (odluka) FROM transakcija NATURAL JOIN jeUkljucen WHERE idNadtransakcija = NEW.idNadtransakcija);
			postavljeno = (SELECT COUNT (*) FROM transakcija WHERE idNadtransakcija = NEW.idNadtransakcija);
			minus = (SELECT COUNT (*) FROM transakcija NATURAL JOIN jeUkljucen WHERE idNadtransakcija = NEW.idNadtransakcija AND odluka = -1);
				 
			IF (minus = 0 AND (postavljeno*3) = suma) THEN
				UPDATE nadtransakcija SET ukupno = 1  WHERE idNadtransakcija = NEW.idNadtransakcija;

			ELSIF (minus > 0)  THEN
				UPDATE nadtransakcija SET ukupno = -1  WHERE idNadtransakcija = NEW.idNadtransakcija;
			END IF;
			
		END IF;
		
		RETURN NEW;
	END;		
	
$$ LANGUAGE plpgsql;


CREATE TRIGGER ukupnaOdlukaLanca 
	AFTER UPDATE ON transakcija
		FOR EACH ROW EXECUTE PROCEDURE fjaUkupnaOdlukaLanca();
		
/*----------------------------------------------------------------------
 9) TRIGGER za zapis odluka kupca jeUklucen nakon -1 odluke  */

CREATE OR REPLACE FUNCTION fjaOdlukaLanaca() RETURNS trigger AS

$$
	DECLARE 
		brojac INT = 0.0;

	BEGIN 
		brojac = (SELECT tipOglas FROM 
				  	ulaznica NATURAL JOIN transakcija NATURAL JOIN oglas NATURAL JOIN jeUkljucen 
				  		WHERE NEW.idTransakcija = idTransakcija );
	
		IF(brojac = 2 AND NEW.odluka = -1 ) THEN
			UPDATE transakcija SET uspjesna = -1 WHERE NEW.idTransakcija = idTransakcija;
			
		ELSIF (brojac = 2 AND NEW.odluka = 0)  THEN 
			UPDATE transakcija SET uspjesna = 0 WHERE NEW.idTransakcija = idTransakcija;
		
		ELSIF (brojac = 2 AND NEW.odluka = 0)  THEN 
			UPDATE transakcija SET uspjesna = 2 WHERE NEW.idTransakcija = idTransakcija;
		END IF;
		
		
		RETURN NEW;
	END;	
	
$$ LANGUAGE plpgsql;

CREATE TRIGGER odlukaLanaca 
	AFTER INSERT OR UPDATE ON jeUkljucen
		FOR EACH ROW EXECUTE PROCEDURE fjaOdlukaLanaca();


/*----------------------------------------------------------------------
 10) TRIGGER za potvrdu ili odbacivanje transakcija */

CREATE OR REPLACE FUNCTION fjaNeagtivanLanac() RETURNS trigger AS
$$
	DECLARE 
		brojac INT = 0.0;
		tip INT = 0.0;
	BEGIN 
	
		IF(NEW.ukupno = -1) THEN
			UPDATE transakcija SET uspjesna = -1  WHERE idNadtransakcija = NEW.idNadtransakcija;
			
		ELSIF (NEW.ukupno = 1) THEN 
			UPDATE transakcija SET uspjesna = 1  WHERE idNadtransakcija = NEW.idNadtransakcija;
			
		END IF;
			
		RETURN NEW;
	END;	
	
$$ LANGUAGE plpgsql;


CREATE TRIGGER neagtivanLanac 
	AFTER INSERT OR UPDATE ON nadtransakcija
		FOR EACH ROW EXECUTE PROCEDURE fjaNeagtivanLanac();

/*----------------------------------------------------------------------
 11) TRIGGER za reaktivaciju karata, poništavanje transakcija (jeUklucen oba staviti u -1 transakciji se mijenja u -1) u slučaju negativne odluke */

CREATE OR REPLACE FUNCTION fjaReaktivacijaLanac() RETURNS trigger AS
$$
	DECLARE 
		brojac INT = 0.0;
		tip INT = 0.0;
	BEGIN 
	
		IF(NEW.uspjesna = -1 ) THEN
			tip = (SELECT vrstaUlaznice FROM ulaznica NATURAL JOIN transakcija WHERE NEW.idTransakcija = idTransakcija) ;
			tip = -tip;
			
			IF(tip>0) THEN /*provjera jer se tjekom odbijanja transakcije okine 2 puta*/
				UPDATE ulaznica SET vrstaUlaznice = tip  WHERE NEW.idUlaznica = idUlaznica;
				/* mozda nekad kasnije UPDATE jeUkljucen SET odluka = -1  WHERE NEW.idTransakcija = idTransakcija;*/
			END IF;
		END IF;
			
		RETURN NEW;
	END;	
	
$$ LANGUAGE plpgsql;
CREATE TRIGGER reaktivacijaLanac 
	AFTER UPDATE ON transakcija
		FOR EACH ROW EXECUTE PROCEDURE fjaReaktivacijaLanac();

/*----------------------------------------------------------------------
 11) TRIGGER za reaktivaciju oglasa */

CREATE OR REPLACE FUNCTION fjaReaktivacijaOglasa() RETURNS trigger AS
$$
	DECLARE 
		brojac INT = 0.0;
	BEGIN 
	
		IF(NEW.aktivan  = -10 ) THEN
			brojac = (SELECT COUNT(*) FROM ulaznica WHERE idOglas= NEW.idOglas AND vrstaUlaznice>0) ;
			
			UPDATE oglas SET aktivan = brojac WHERE idOglas = NEW.idOglas;
		END IF;
			
		RETURN NEW;
	END;	
	
$$ LANGUAGE plpgsql;
CREATE TRIGGER reaktivacijaOglasa
	AFTER UPDATE ON oglas
		FOR EACH ROW EXECUTE PROCEDURE fjaReaktivacijaOglasa();

