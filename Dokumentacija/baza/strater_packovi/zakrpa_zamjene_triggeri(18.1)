 /*----------------------------------------------------------------------
 3) TRIGGER za slanje zahtjeva potvrde zamjene vlasniku karte  i deaktivacija iste P*/
CREATE OR REPLACE FUNCTION fjaZapocniZamjenu() RETURNS trigger AS

$$
	DECLARE 
		brojac INT = 0.0;
		tip INT = 0.0;
		mail VARCHAR;

	BEGIN 
		brojac = (SELECT tipOglas FROM ulaznica NATURAL JOIN transakcija NATURAL JOIN oglas WHERE NEW.idTransakcija = idTransakcija) ;
	
		IF(brojac = 0 ) THEN
			/* unos odluke za vlasnika */
			mail = (SELECT email FROM ulaznica NATURAL JOIN transakcija NATURAL JOIN oglas WHERE NEW.idTransakcija = idTransakcija) ;
			INSERT INTO jeUkljucen (email, idTransakcija, odluka) VALUES (mail, NEW.idTransakcija, 0);
				
			/* deaktiviranje karte iz oglasa */
			tip = (SELECT vrstaUlaznice FROM ulaznica NATURAL JOIN transakcija WHERE NEW.idTransakcija = idTransakcija);
			tip = -tip;
			UPDATE ulaznica SET vrstaUlaznice = tip  WHERE  NEW.idUlaznica = idUlaznica;


		END IF;
		
		RETURN NEW;
	END;	
	
$$ LANGUAGE plpgsql;


/*----------------------------------------------------------------------
 4) TRIGGER za deaktiviranje ponuđene karte PN*/

CREATE OR REPLACE FUNCTION fjaDeaktivirajVezanu() RETURNS trigger AS

$$
	DECLARE 
		tip INT = 0.0;

	BEGIN 

		/* deaktiviranje karte seMijnja */
			tip = (SELECT vrstaUlaznice FROM ulaznica NATURAL JOIN seMijenja WHERE NEW.idUlaznica = idUlaznica AND NEW.idTransakcija = idTransakcija);
			tip = -tip;
			UPDATE ulaznica SET vrstaUlaznice = tip  WHERE  NEW.idUlaznica = idUlaznica; /* oprez! samo jedna karta pa pazi na update (VIDI gornji upit) */
		
		RETURN NEW;
	END;	
	
$$ LANGUAGE plpgsql;

CREATE TRIGGER DeaktivirajVezanu 
	AFTER INSERT ON seMijenja
		FOR EACH ROW EXECUTE PROCEDURE fjaDeaktivirajVezanu();


  
/*----------------------------------------------------------------------
6) TRIGGER za dovršavanje zamjene nakon odluke (reaktivacije karta (i ponuditelja i primatelja)) */

CREATE OR REPLACE FUNCTION fjaZgotoviZamjenu() RETURNS trigger AS

$$
	DECLARE 
		brojac INT = 0.0;
		tip INT = 0.0;
		drugaKarta INT = 0.0;

	BEGIN 
		brojac = (SELECT tipOglas FROM ulaznica NATURAL JOIN transakcija NATURAL JOIN oglas WHERE NEW.idTransakcija = idTransakcija) ;
	
		IF(brojac = 0 AND NEW.uspjesna = -1) THEN 
			/* neuspjesna jer treba reaktivirati karte, koje su već deaktivirane na početku transakcije*/
			
			/* za reaktivirnajei karte onog koji je prihvatio "prodavac" */
			tip = (SELECT vrstaUlaznice FROM ulaznica NATURAL JOIN transakcija WHERE NEW.idTransakcija = idTransakcija) ;
			IF(tip<0) THEN
				tip = -tip;
			END IF;
			
			UPDATE ulaznica SET vrstaUlaznice = tip  WHERE NEW.idUlaznica = idUlaznica;
			
			/* za reaktivirnaje karte onog koji je ponudio "kupac" */
			tip = (SELECT vrstaUlaznice FROM semijenja NATURAL JOIN ulaznica 
				   	WHERE NEW.idTransakcija = idTransakcija);
			
			drugaKarta = (SELECT idulaznica FROM semijenja NATURAL JOIN ulaznica
					WHERE NEW.idTransakcija = idTransakcija);
					
			IF(tip<0) THEN
				tip = -tip;
			END IF;
			
			UPDATE ulaznica SET vrstaUlaznice = tip  WHERE  drugaKarta = idUlaznica;

		END IF;
		
		RETURN NEW;
	END;	
	
$$ LANGUAGE plpgsql;

