/* primjeri upita pri procesu razmjene */
/* 
INSERT INTO TRANSAKCIJA (idUlaznica) VALUES (18);
INSERT INTO jeukljucen (email, idTransakcija, odluka ) VALUES ('pero@peric.com', 13, 2);
INSERT INTO seMijenja (idUlaznica , idTransakcija) VALUES (20, 13);
UPDATE jeukljucen SET odluka = -1 WHERE email = 'ivo@ivic.com' AND idTransakcija =13;
*/

/*----------------------------------------------------------------------
1) TRIGGER za slanje zahtjeva potvrde zamjene vlasniku karte */
CREATE OR REPLACE FUNCTION fjaZapocniZamjenu() RETURNS trigger AS

$$
	DECLARE 
		brojac INT = 0.0;
		tip INT = 0.0;
		mail VARCHAR;

	BEGIN 
		brojac = (SELECT tipOglas FROM ulaznica NATURAL JOIN transakcija NATURAL JOIN oglas WHERE NEW.idTransakcija = idTransakcija) ;
	
		IF(brojac = 0) THEN
			mail = (SELECT email FROM ulaznica NATURAL JOIN transakcija NATURAL JOIN oglas WHERE NEW.idTransakcija = idTransakcija) ;
			INSERT INTO jeUkljucen (email, idTransakcija, odluka) VALUES (mail, NEW.idTransakcija, 0);

		END IF;
		
		RETURN NEW;
	END;	
	
$$ LANGUAGE plpgsql;

CREATE TRIGGER ZapocniZamjenu 
	AFTER INSERT ON transakcija
		FOR EACH ROW EXECUTE PROCEDURE fjaZapocniZamjenu();

/*----------------------------------------------------------------------
2) TRIGGER za dovršavanje zamjene nakon odluke (upis odluke) */

CREATE OR REPLACE FUNCTION fjaOdluciZamjenu() RETURNS trigger AS

$$
	DECLARE 
		brojac INT = 0.0;
		suma INT = 0.0;
		tip INT = 0.0;

	BEGIN 
		brojac = (SELECT tipOglas FROM 
				  	ulaznica NATURAL JOIN transakcija NATURAL JOIN oglas NATURAL JOIN jeUkljucen 
				  		WHERE NEW.idTransakcija = idTransakcija );
		suma = (SELECT SUM (odluka) FROM jeUkljucen WHERE idTransakcija = NEW.idTransakcija);
	
		IF(brojac = 0 AND (suma = 1 OR suma = 3)) THEN
			UPDATE transakcija SET uspjesna = (suma-2) WHERE NEW.idTransakcija = idTransakcija;
		END IF;
		
		
		RETURN NEW;
	END;	
	
$$ LANGUAGE plpgsql;

CREATE TRIGGER OdluciZamjenu 
	AFTER INSERT OR UPDATE ON jeUkljucen
		FOR EACH ROW EXECUTE PROCEDURE fjaOdluciZamjenu();


/*----------------------------------------------------------------------
3) TRIGGER za dovršavanje zamjene nakon odluke (deaktivacije karta (i ponuditelja i primatelja)) */

CREATE OR REPLACE FUNCTION fjaZgotoviZamjenu() RETURNS trigger AS

$$
	DECLARE 
		brojac INT = 0.0;
		tip INT = 0.0;
		drugaKarta INT = 0.0;

	BEGIN 
		brojac = (SELECT tipOglas FROM ulaznica NATURAL JOIN transakcija NATURAL JOIN oglas WHERE NEW.idTransakcija = idTransakcija) ;
	
		IF(brojac = 0 AND NEW.uspjesna = 1) THEN
			
			/* za prikaz neaktivnosti karte onog koji je prihvatio "prodavac" */
			tip = (SELECT vrstaUlaznice FROM ulaznica NATURAL JOIN transakcija WHERE NEW.idTransakcija = idTransakcija) ;
			tip = -tip;
			UPDATE ulaznica SET vrstaUlaznice = tip  WHERE NEW.idUlaznica = idUlaznica;
			
			/* za prikaz neaktivnosti karte onog koji je ponudio "kupac" */
			tip = (SELECT vrstaUlaznice FROM semijenja  NATURAL JOIN ulaznica NATURAL JOIN oglas 
				   	WHERE NEW.idTransakcija = idTransakcija);
			drugaKarta = (SELECT idulaznica FROM semijenja NATURAL JOIN ulaznica NATURAL JOIN oglas
					WHERE NEW.idTransakcija = idTransakcija);
			tip = -tip;
			UPDATE ulaznica SET vrstaUlaznice = tip  WHERE  drugaKarta = idUlaznica;

		END IF;
		
		RETURN NEW;
	END;	
	
$$ LANGUAGE plpgsql;

CREATE TRIGGER ZgotoviZamjenu 
	AFTER INSERT OR UPDATE ON transakcija
		FOR EACH ROW EXECUTE PROCEDURE fjaZgotoviZamjenu();
